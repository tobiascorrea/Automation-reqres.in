name: Robot Framework API Tests

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main']

jobs:
  robot-tests:
    runs-on: ubuntu-latest
    env:
      ENV: dev                   # usado pelos testes Robot
      PROJECT_KEY: SCRUM         # Jira Project Key
      CYCLE_KEY: SCRUM-R1        # Zephyr (se usar)
      BASE_JIRA_LABELS: robot,api,ci
      FORCE_FAIL: ${{ vars.FORCE_FAIL || 'false' }}   # canário opcional

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preparar .env (somente para os testes)
        shell: bash
        run: |
          if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "Usando .env a partir de .env.example"
          else
            echo "ENV=dev" > .env
            echo "Criado .env mínimo (sem .env.example)"
          fi

      # --- EXECUTA ROBOT E CAPTURA O STATUS (sem quebrar o job aqui) ---
      - name: Executar testes Robot (capturar status)
        id: robot
        shell: bash
        run: |
          set +e
          mkdir -p reports
          robot -d reports -x junit.xml -v FORCE_FAIL:${{ env.FORCE_FAIL }} tests/api
          rc=$?
          echo "exit_code=$rc" >> $GITHUB_OUTPUT
          if [ "$rc" -eq 0 ]; then
            echo "result=SUCCESS" >> $GITHUB_OUTPUT
          else
            echo "result=FAILURE" >> $GITHUB_OUTPUT
          fi
          exit 0

      - name: Garantir junit.xml (converte output.xml se necessário)
        shell: bash
        run: |
          if [ ! -f "reports/junit.xml" ] && [ -f "reports/output.xml" ]; then
            echo "Gerando junit.xml a partir de reports/output.xml..."
            rebot --xunit reports/junit.xml --output NONE reports/output.xml
          fi
          echo "Conteúdo da pasta reports:"
          ls -la reports || true

      # --- Extrair métricas e TODAS as falhas do JUnit (ignorando namespace) ---
      - name: Extrair falhas do JUnit
        if: always()
        id: junit
        shell: bash
        run: |
          python - <<'PY'
          import os, xml.etree.ElementTree as ET

          out = os.environ['GITHUB_OUTPUT']
          p = 'reports/junit.xml'

          total = failures = errors = skipped = 0
          failed = []

          if os.path.exists(p):
              root = ET.parse(p).getroot()

              # Coleta todos os <testcase> (qualquer nível)
              tcs = root.findall('.//testcase')
              total = len(tcs)

              for tc in tcs:
                  # contadores (considera filhos com namespaces)
                  if tc.find('skipped') is not None or any(ch.tag.endswith('skipped') for ch in list(tc)):
                      skipped += 1

                  node = None
                  for ch in list(tc):
                      if ch.tag.endswith('failure'):
                          node = ch
                          failures += 1
                          break
                      if ch.tag.endswith('error'):
                          node = ch
                          errors += 1
                          break

                  if node is not None:
                      name = tc.attrib.get('name', '')
                      cls  = tc.attrib.get('classname', '')
                      msg  = (node.attrib.get('message', '') or (node.text or '')).strip()
                      msg  = (msg.splitlines()[0] if msg else '')
                      failed.append({"name": name, "class": cls, "message": msg})

              # Agrega contadores das suites (se presentes nos atributos)
              suites = root.findall('.//testsuite')
              if suites:
                  tf = te = ts = 0
                  for s in suites:
                      tf += int(s.attrib.get('failures', 0))
                      te += int(s.attrib.get('errors', 0))
                      ts += int(s.attrib.get('skipped', 0))
                  if tf or te or ts:
                      failures, errors, skipped = tf, te, ts

          failed_md = "\n".join([f"- **{x['name']}** ({x['class']}) — {x['message']}" for x in failed]) or "—"

          with open(out, 'a') as fh:
              print(f"total={total}", file=fh)
              print(f"failures={failures}", file=fh)
              print(f"errors={errors}", file=fh)
              print(f"skipped={skipped}", file=fh)
              print("failed_list<<EOF", file=fh)
              print(failed_md, file=fh)
              print("EOF", file=fh)
          PY

      # --- (Opcional) Upload para Zephyr Essential (Scale) no ciclo existente ---
      - name: Upload JUnit para Zephyr Essential (Scale)
        if: ${{ always() && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) }}
        continue-on-error: true
        env:
          ZEPHYR_TOKEN: ${{ secrets.ZEPHYR_TOKEN }}
          PROJECT_KEY: ${{ env.PROJECT_KEY }}
          CYCLE_KEY:   ${{ env.CYCLE_KEY }}
        shell: bash
        run: |
          if [ -z "${ZEPHYR_TOKEN:-}" ]; then
            echo "ZEPHYR_TOKEN indisponível. Pulando upload."
            exit 0
          fi
          if [ ! -f "reports/junit.xml" ]; then
            echo "reports/junit.xml não encontrado. Pulando upload."
            exit 0
          fi
          echo "Enviando junit.xml para Zephyr Essential (projectKey=${PROJECT_KEY}, testCycleKey=${CYCLE_KEY})..."
          HTTP_CODE=$(curl -sS -o response.json -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${ZEPHYR_TOKEN}" \
            -F "file=@reports/junit.xml;type=application/xml" \
            -F "testCycleKey=${CYCLE_KEY}" \
            "https://api.zephyrscale.smartbear.com/v2/automations/executions/junit?projectKey=${PROJECT_KEY}&autoCreateTestCases=false")
          echo "HTTP: $HTTP_CODE"
          echo "Resposta:"
          cat response.json || true

      # --- Garantir jq para montar payloads JSON do Jira ---
      - name: Instalar jq (se necessário)
        shell: bash
        run: |
          if ! command -v jq >/dev/null 21: then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      # --- CRIA A ISSUE NO JIRA E ANEXA RELATÓRIOS ---
      - name: Criar Issue no Jira com anexos (sempre)
        if: always()
        id: jira
        env:
          JIRA_BASE_URL:   ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN:  ${{ secrets.JIRA_API_TOKEN }}
          PROJECT_KEY:     ${{ env.PROJECT_KEY }}
          JIRA_LABELS:     ${{ secrets.JIRA_LABELS || env.BASE_JIRA_LABELS }}
          RESULT:          ${{ steps.robot.outputs.result }}
          EXIT_CODE:       ${{ steps.robot.outputs.exit_code }}
          RUN_URL:         ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BRANCH:          ${{ github.ref_name }}
          SHA:             ${{ github.sha }}
          TOTAL:           ${{ steps.junit.outputs.total }}
          FAILURES:        ${{ steps.junit.outputs.failures }}
          ERRORS:          ${{ steps.junit.outputs.errors }}
          SKIPPED:         ${{ steps.junit.outputs.skipped }}
          FAILED_LIST:     ${{ steps.junit.outputs.failed_list }}
        shell: bash
        run: |
          if [ -z "${JIRA_BASE_URL:-}" ] || [ -z "${JIRA_USER_EMAIL:-}" ] || [ -z "${JIRA_API_TOKEN:-}" ]; then
            echo "Secrets do Jira ausentes; pulando criação da issue."
            exit 0
          fi

          short_sha="${SHA:0:7}"
          if [ "${RESULT}" = "SUCCESS" ]; then
            ISSUE_TYPE="Task"
            LABELS="${JIRA_LABELS},success"
            EXTRA="Todos os testes passaram ✅"
          else
            ISSUE_TYPE="Bug"
            LABELS="${JIRA_LABELS},failure"
            EXTRA="Cenários com falha:\n${FAILED_LIST}"
          fi

          DESCRIPTION_TEXT=$(printf "Resultado: %s\nExit code: %s\nResumo JUnit: total=%s, failures=%s, errors=%s, skipped=%s\nBranch: %s\nCommit: %s\nRun: %s\n\n%s\n" \
            "${RESULT}" "${EXIT_CODE}" "${TOTAL}" "${FAILURES}" "${ERRORS}" "${SKIPPED}" \
            "${BRANCH}" "${short_sha}" "${RUN_URL}" "${EXTRA}")

          PAYLOAD=$(jq -n \
            --arg proj "$PROJECT_KEY" \
            --arg it "$ISSUE_TYPE" \
            --arg sum "[CI] API Tests: ${RESULT} - ${BRANCH} (${short_sha})" \
            --arg desc "$DESCRIPTION_TEXT" \
            --arg labels "$LABELS" \
            '{
              fields: {
                project: { key: $proj },
                issuetype: { name: $it },
                summary: $sum,
                labels: ($labels | split(",") | map(.|gsub("^\\s+|\\s+$";""))),
                description: {
                  type: "doc",
                  version: 1,
                  content: [ { type: "paragraph", content: [ { type: "text", text: $desc } ] } ]
                }
              }
            }')

          echo "Criando issue no Jira..."
          CREATE_RESP=$(curl -sS -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -X POST "${JIRA_BASE_URL}/rest/api/3/issue" \
            --data "${PAYLOAD}")

          ISSUE_KEY=$(echo "$CREATE_RESP" | jq -r '.key // empty')
          if [ -z "$ISSUE_KEY" ]; then
            echo "Falha ao criar issue no Jira:"
            echo "$CREATE_RESP"
            exit 0
          fi

          echo "Issue criada: ${ISSUE_KEY}"
          echo "issue_key=${ISSUE_KEY}" >> $GITHUB_OUTPUT

          # Anexos
          ATTACH_URL="${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/attachments"
          if ls reports/* >/dev/null 2>&1; then
            echo "Anexando relatórios..."
            curl -sS -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
              -H "X-Atlassian-Token: no-check" \
              -F "file=@reports/log.html" \
              -F "file=@reports/report.html" \
              -F "file=@reports/junit.xml" \
              -X POST "${ATTACH_URL}" || true
          fi

          # Comentário com link do run + lista de falhas (se houver)
          COMMENT_TEXT="GitHub Action: ${RUN_URL}"
          if [ "${RESULT}" != "SUCCESS" ]; then
            COMMENT_TEXT="${COMMENT_TEXT}\n\nFalhas:\n${FAILED_LIST}"
          fi

          COMMENT_PAYLOAD=$(jq -n --arg txt "$COMMENT_TEXT" \
            '{ body: { type:"doc", version:1, content:[{type:"paragraph",content:[{type:"text",text:$txt}]}] } }')

          curl -sS -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -X POST "${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/comment" \
            --data "${COMMENT_PAYLOAD}" >/dev/null || true

      # --- TRANSICIONAR ISSUE APENAS EM SUCESSO ---
      - name: Transicionar Issue no Jira (apenas sucesso -> Testes Concluido)
        if: ${{ always() && steps.jira.outputs.issue_key && steps.robot.outputs.result == 'SUCCESS' }}
        env:
          JIRA_BASE_URL:   ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN:  ${{ secrets.JIRA_API_TOKEN }}
          ISSUE_KEY:       ${{ steps.jira.outputs.issue_key }}
          TARGET_STATUS_SUCCESS: "Testes Concluido"
        shell: bash
        run: |
          set -e
          echo "Buscando transições disponíveis para ${ISSUE_KEY}…"
          TRANS=$(curl -sS -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            -G "${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/transitions")

          TID=$(echo "$TRANS" | jq -r --arg t "$TARGET_STATUS_SUCCESS" '
            .transitions[] 
            | select((.to.name|ascii_downcase)==($t|ascii_downcase) or (.name|ascii_downcase)==($t|ascii_downcase))
            | .id' | head -n1)

          if [ -z "$TID" ]; then
            echo "Transição para \"$TARGET_STATUS_SUCCESS\" não encontrada. Disponíveis:"
            echo "$TRANS" | jq -r '.transitions[] | "\(.id)  \(.name)  ->  \(.to.name)"'
            exit 0
          fi

          echo "Executando transição id=${TID} para \"${TARGET_STATUS_SUCCESS}\"…"
          curl -sS -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -X POST "${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/transitions" \
            --data "{\"transition\": {\"id\": \"${TID}\"}}" >/dev/null
          echo "OK: Issue ${ISSUE_KEY} transicionada."

      - name: Publicar Relatórios Robot Framework (sempre)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-reports
          path: reports/

      # --- FALHA O JOB SE HOUVE FALHA NOS TESTES ---
      - name: Falhar pipeline se houve falha nos testes
        if: ${{ steps.robot.outputs.exit_code != '0' }}
        run: exit 1
